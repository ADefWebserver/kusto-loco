@page "/file-upload"
@using System
@using System.IO
@using BabyKusto.Core
@using BabyKusto.Core.Extensions
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<FileUpload> Logger
@inject IWebHostEnvironment Environment

<p>
    <label>Please upload a CSV file with your data</label><br />
    <label>* Default result is based on Query = 'Data', File = a default table.</label>
</p>

<p>
    <label>
        KQL query:
        <textarea rows="10" cols="50" @oninput="@GetValue" placeholder="Please use 'Data' as your query table name." />
        <InputFile OnChange="@LoadFiles" />
    </label>
</p>


@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var resultData in resultToDisplay)
        {
            <li>
                <ul>
                    <li>Query result:</li>
                    <li><pre>@resultData</pre></li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<string> resultToDisplay = new List<string>();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private InMemoryTableSource myTable = GetDefaultTable();
    private string queryValue = "Data";

    private static InMemoryTableSource GetDefaultTable()
    {
        var myTable = new InMemoryTableSource(
                      new TableSchema(
                      new List<ColumnDefinition>()
                        {
                        new ColumnDefinition("AppMachine",   KustoValueKind.String),
                        new ColumnDefinition("CounterName",  KustoValueKind.String),
                        new ColumnDefinition("CounterValue", KustoValueKind.Real),
                        }),
                        new[]
                        {
                        new Column(new object?[] { "vm0", "vm0", "vm1", "vm1", "vm2" }),
                        new Column(new object?[] { "cpu", "mem", "cpu", "mem", "cpu" }),
                        new Column(new object?[] {  50.0,  30.0,  20.0,  5.0,   100.0 }),
                        });
        return myTable;
    }

    protected override async Task OnInitializedAsync()
    {
        queryTable();
    }

    private void GetValue(ChangeEventArgs e)
    {
        queryValue = e.Value.ToString();
        if (myTable != null)
        {
            queryTable();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                myTable = (InMemoryTableSource)await fileProcessor(file);
                if (queryValue != null)
                {
                    queryTable();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }

    private async Task<object?> fileProcessor(IBrowserFile file)
    {
        var columnName = Array.Empty<string>();
        var rowValues = Array.Empty<object?>();
        var columns = new List<List<object?>>();

        try
        {
            using (StreamReader sr = new StreamReader(file.OpenReadStream(maxFileSize)))
            {
                string? line;

                // Read line by line
                var rowNum = 0;
                while ((line = await sr.ReadLineAsync()) != null)
                {
                    if (rowNum == 0)
                    {
                        // ['a', 'b']
                        columnName = line.Split(',');

                        // Initialize column list
                        var c = 0;
                        while (c < columnName.Length)
                        {
                            columns.Add(new List<object?>());
                            c++;
                        }
                    }
                    else
                    {
                        // [1.0, 2.0]
                        rowValues = line.Split(',');

                        // Fill column array
                        var r = 0;
                        while (r < rowValues.Length)
                        {
                            columns[r].Add(rowValues[r]);
                            r++;
                        }
                    }
                    rowNum++;
                }
            }

            // Generate ColumnDefinition
            var tableSchema = new List<ColumnDefinition>();

            foreach (var colmunValue in columnName)
            {
                tableSchema.Add(new ColumnDefinition(colmunValue, KustoValueKind.Real));
            }

            return new InMemoryTableSource(
                new TableSchema(
                tableSchema),
                columns.Select(c => new Column(c.ToArray())).ToArray());
        }
        catch (Exception e)
        {
            Console.WriteLine("The file could not be read:");
            Console.WriteLine(e.Message);
            return "Please refer console for more details.";
        }
    }

    private void queryTable()
    {
        resultToDisplay.Clear();
        try
        {
            var engine = new BabyKustoEngine();
            engine.AddGlobalTable(
            "Data",
            myTable);

            var result = engine.Evaluate(queryValue);
            if (result is ITableSource tableResult)
            {
                resultToDisplay.Add(tableResult.DumpToString());
            }
        }
        catch (Exception e)
        {
            resultToDisplay.Add(e.Message);
        }
    }
}