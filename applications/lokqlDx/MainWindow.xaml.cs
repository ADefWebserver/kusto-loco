using System.ComponentModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using KustoLoco.Core;
using KustoLoco.Core.Evaluation;
using KustoLoco.FileFormats;
using KustoLoco.Rendering;
using Lokql.Engine;
using Microsoft.Win32;

namespace lokqlDx;

public partial class MainWindow : Window
{
    private readonly WpfConsole _console;
    private readonly PreferencesManager _preferenceManager = new();
    private readonly WorkspaceManager _workspaceManager = new();
    private InteractiveTableExplorer _explorer;

    public MainWindow()
    {
        InitializeComponent();
        _console = new WpfConsole(OutputText);
        var settings = new KustoSettings();
        var loader = new StandardFormatAdaptor(settings);
        _explorer = new InteractiveTableExplorer(_console, loader, settings);
    }

    private bool isBusy;
    private async Task RunQuery(string query)
    {
        if (isBusy)
            return;
        isBusy = true;
        Editor.SetBusy(true);
        //start capturing console output from the engine
        _console.PrepareForOutput();
        //run the supplied lines of kusto/commands
        //Note that we need the extra Task.Run here to ensure
        //that the UI thread is not blocked for reports generated by
        //the engine
        var result =
            await Task.Run(async () => await _explorer.RunInput(query, false));

        //if there are no results leave the previously rendered results in place
        if (result.RowCount != 0)
        {

            if (result.Visualization != VisualizationState.Empty)
            {
                //annoying we have to do this, but it's the only way to get the webview to render
                await webview.EnsureCoreWebView2Async();
                //generate the html and display it
                var html = KustoResultRenderer.RenderToHtml(result);
                try
                {
                    webview.NavigateToString(html);
                }
                catch
                {
                    _explorer.Warn("Unable to render results in webview");
                }
            }

            FillInDataGrid(result);
        }

        Editor.SetBusy(false);
        isBusy = false;
    }

    private void FillInDataGrid(KustoQueryResult result)
    {
        var maxDataGridRows = int.TryParse(VisibleDataGridRows.Text, out var parsed) ? parsed : 100;
        var dt = result.ToDataTable(maxDataGridRows);
        dataGrid.ItemsSource = dt.DefaultView;
    }

    /// <summary>
    ///     Called when user presses CTRL-ENTER in the query editor
    /// </summary>
    private async void OnQueryEditorRunTextBlock(object? sender, QueryEditorRunEventArgs eventArgs)
    {
        await RunQuery(eventArgs.Query);
    }

    private void UpdateUIFromWorkspace()
    {
        Editor.SetText(_workspaceManager.UserText);
        var settings = _workspaceManager.Settings;
        var loader = new StandardFormatAdaptor(settings);
        _explorer = new InteractiveTableExplorer(_console, loader, settings);
        UpdateFontSize();
        Title = $"LokqlDX - {_workspaceManager._path}";
    }

    private async void MainWindow_OnLoaded(object sender, RoutedEventArgs e)
    {
        _preferenceManager.Load();
        _workspaceManager.Load(_preferenceManager.Preferences.LastWorkspacePath);
        if (this.Width > 100 && this.Height > 100 && this.Left > 0 && this.Top > 0)
        {
            this.Width = _preferenceManager.Preferences.WindowWidth;
            this.Height = _preferenceManager.Preferences.WindowHeight;
            this.Left = _preferenceManager.Preferences.WindowLeft;
            this.Top = _preferenceManager.Preferences.WindowTop;
        }

        UpdateUIFromWorkspace();
        await Navigate("https://github.com/NeilMacMullen/kusto-loco/wiki/LokqlDX") ;
    }

    private void SaveWorkspace(string path)
    {
        PreferencesManager.EnsureDefaultFolderExists();
        _workspaceManager.Save(path, Editor.GetText(), _explorer._settings);
        _preferenceManager.Preferences.LastWorkspacePath = _workspaceManager._path;
        _preferenceManager.Preferences.WindowLeft=this.Left;
        _preferenceManager.Preferences.WindowTop = this.Top;
        _preferenceManager.Preferences.WindowWidth = this.Width;
        _preferenceManager.Preferences.WindowHeight = this.Height;

        _preferenceManager.Save();
    }

    private void MainWindow_OnClosing(object? sender, CancelEventArgs e)
    {
        Save();
    }

    private void OpenWorkSpace(object sender, RoutedEventArgs e)
    {
        var folder = _workspaceManager.ContainingFolder();
        var dialog = new OpenFileDialog()
        {
            InitialDirectory = folder,
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager._path)
        };

        if (dialog.ShowDialog() == true)
        {
            _workspaceManager.Load(dialog.FileName);
            UpdateUIFromWorkspace();
        }
    }

    private void EditPreferences(object sender, RoutedEventArgs e)
    {
       
    }

    private void SaveWorkspace(object sender, RoutedEventArgs e)
    {
        Save();
    }

    private void Save()
    {
        SaveWorkspace(_workspaceManager._path);
    }

    private bool SaveAs()
    {
        var folder = _workspaceManager.ContainingFolder();
        var dialog = new SaveFileDialog
        {
            InitialDirectory = folder,
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager._path)
        };
        if (dialog.ShowDialog() == true)
        {
            SaveWorkspace(dialog.FileName);
            return true;
        }

        return false;
    }

    private void SaveWorkspaceAs(object sender, RoutedEventArgs e)
    {
        SaveAs();
    }

    private async void NewWorkspace(object sender, RoutedEventArgs e)
    {
        //save current
        Save();
        var prevPath = _workspaceManager._path;
        _workspaceManager.CreateNewInCurrentFolder();
        if (SaveAs())
        {

            UpdateUIFromWorkspace();
         
            await _explorer.RunInput($".set {KustoSettingNames.KustoDataPath} \"{_workspaceManager.ContainingFolder()}\"",false);
        }
        else
        {
            _workspaceManager.Load(prevPath);
            UpdateUIFromWorkspace();
        }
    }
    
    private void IncreaseFontSize(object sender, RoutedEventArgs e)
    {
        _preferenceManager.Preferences.FontSize =  Math.Min(40, _preferenceManager.Preferences.FontSize + 1);
        UpdateFontSize();
    }
    private void DecreaseFontSize(object sender, RoutedEventArgs e)
    {
        _preferenceManager.Preferences.FontSize = Math.Max(6, _preferenceManager.Preferences.FontSize - 1);
        UpdateFontSize();
    }

    private void UpdateFontSize()
    {
        Editor.SetFontSize(_preferenceManager.Preferences.FontSize);
        OutputText.FontSize= _preferenceManager.Preferences.FontSize;
        dataGrid.FontSize= _preferenceManager.Preferences.FontSize;

    }

    protected override void OnKeyDown(KeyEventArgs e)
    {
        base.OnKeyDown(e);

        // here I suppose the window's menu is named "MainMenu"
        MainMenu.RaiseMenuItemClickOnKeyGesture(e);
    }

    private async Task Navigate(string url)
    {
        await webview.EnsureCoreWebView2Async();
        webview.Source = new Uri(url);
    }
    private async void NavigateToGettingStarted(object sender, RoutedEventArgs e)
    {
        await Navigate("https://github.com/NeilMacMullen/kusto-loco/wiki/LokqlDX");
    }

    private async void NavigateToProjectPage(object sender, RoutedEventArgs e)
    {
        await Navigate("https://github.com/NeilMacMullen/kusto-loco");
    }

    private async void NavigateToKqlIntroductionPage(object sender, RoutedEventArgs e)
    {
        await Navigate(
            "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/tutorials/learn-common-operators");
    }
}


public static class MenuExtensions
{
    public static void RaiseMenuItemClickOnKeyGesture(this ItemsControl? control, KeyEventArgs args) => RaiseMenuItemClickOnKeyGesture(control, args, false);
    public static void RaiseMenuItemClickOnKeyGesture(this ItemsControl? control, KeyEventArgs args, bool throwOnError)
    {
        if (args == null)
            throw new ArgumentNullException(nameof(args));

        if (control == null)
            return;

        var kgc = new KeyGestureConverter();
        foreach (var item in control.Items.OfType<MenuItem>())
        {
            if (!string.IsNullOrWhiteSpace(item.InputGestureText))
            {
                KeyGesture? gesture = null;
                if (throwOnError)
                {
                    gesture = kgc.ConvertFrom(item.InputGestureText) as KeyGesture;
                }
                else
                {
                    try
                    {
                        gesture = kgc.ConvertFrom(item.InputGestureText) as KeyGesture;
                    }
                    catch
                    {
                    }
                }

          
                    if (gesture != null && gesture.Matches(null, args)
                       )
                    {
                        item.RaiseEvent(new RoutedEventArgs(MenuItem.ClickEvent));
                        args.Handled = true;
                        return;
                    }
           
            }

            RaiseMenuItemClickOnKeyGesture(item, args, throwOnError);
            if (args.Handled)
                return;
        }
    }
}
