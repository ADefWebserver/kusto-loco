using System.ComponentModel;
using System.IO;
using System.Windows;
using KustoLoco.Core;
using KustoLoco.Core.Evaluation;
using KustoLoco.FileFormats;
using KustoLoco.Rendering;
using Lokql.Engine;
using Microsoft.Win32;

namespace lokqlDx;

public partial class MainWindow : Window
{
    private readonly WpfConsole _console;
    private readonly PreferencesManager _preferenceManager = new();
    private readonly WorkspaceManager _workspaceManager = new();
    private InteractiveTableExplorer _explorer;

    public MainWindow()
    {
        InitializeComponent();
        _console = new WpfConsole(OutputText);
        var settings = new KustoSettings();
        var loader = new StandardFormatAdaptor(settings);
        _explorer = new InteractiveTableExplorer(_console, loader, settings);
    }


    private async Task RunQuery(string query)
    {
        //start capturing console output from the engine
        _console.PrepareForOutput();
        //run the supplied lines of kusto/commands
        //Note that we need the extra Task.Run here to ensure
        //that the UI thread is not blocked for reports generated by
        //the engine
        var result =
            await Task.Run(async () => await _explorer.RunInput(query, false));

        //if there are no results leave the previously rendered results in place
        if (result.RowCount == 0)
            return;

        if (result.Visualization != VisualizationState.Empty)
        {
            //annoying we have to do this, but it's the only way to get the webview to render
            await webview.EnsureCoreWebView2Async();
            //generate the html and display it
            var html = KustoResultRenderer.RenderToHtml(result);
            webview.NavigateToString(html);
        }

        FillInDataGrid(result);
    }

    private void FillInDataGrid(KustoQueryResult result)
    {
        var maxDataGridRows = int.TryParse(VisibleDataGridRows.Text, out var parsed) ? parsed : 100;
        var dt = result.ToDataTable(maxDataGridRows);
        dataGrid.ItemsSource = dt.DefaultView;
    }

    /// <summary>
    ///     Called when user presses CTRL-ENTER in the query editor
    /// </summary>
    private async void OnQueryEditorRunTextBlock(object? sender, QueryEditorRunEventArgs eventArgs)
    {
        await RunQuery(eventArgs.Query);
    }

    private void UpdateUIFromWorkspace()
    {
        Editor.SetText(_workspaceManager.UserText);
        var settings = _workspaceManager.Settings;
        var loader = new StandardFormatAdaptor(settings);
        _explorer = new InteractiveTableExplorer(_console, loader, settings);
    }
    private void MainWindow_OnLoaded(object sender, RoutedEventArgs e)
    {
        _preferenceManager.Load();
        _workspaceManager.Load(_preferenceManager.Preferences.LastWorkspacePath);
      UpdateUIFromWorkspace();
    }

    private void SaveWorkspace(string path)
    {
        PreferencesManager.EnsureDefaultFolderExists();
        _workspaceManager.Save(path, Editor.GetText(), _explorer._settings);
        _preferenceManager.Preferences.LastWorkspacePath = _workspaceManager._path;
        _preferenceManager.Save();
    }

    private void MainWindow_OnClosing(object? sender, CancelEventArgs e)
    {
        Save();
    }

    private void OpenWorkSpace(object sender, RoutedEventArgs e)
    {
        var folder = _workspaceManager.ContainingFolder();
        var dialog = new OpenFileDialog()
        {
            InitialDirectory = folder,
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager._path)
        };

        if (dialog.ShowDialog() == true)
        {
            _workspaceManager.Load(dialog.FileName);
            UpdateUIFromWorkspace();
        }
    }

    private void EditPreferences(object sender, RoutedEventArgs e)
    {
       
    }

    private void SaveWorkspace(object sender, RoutedEventArgs e)
    {
        Save();
    }

    private void Save()
    {
        SaveWorkspace(_workspaceManager._path);
    }

    private bool SaveAs()
    {
        var folder = _workspaceManager.ContainingFolder();
        var dialog = new SaveFileDialog
        {
            InitialDirectory = folder,
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager._path)
        };
        if (dialog.ShowDialog() == true)
        {
            SaveWorkspace(dialog.FileName);
            return true;
        }

        return false;
    }

    private void SaveWorkspaceAs(object sender, RoutedEventArgs e)
    {
        SaveAs();
    }

    private void NewWorkspace(object sender, RoutedEventArgs e)
    {
        //save current
        Save();
        var currentPath = _workspaceManager._path;
        _workspaceManager.CreateNewPathInCurrentFolder();
        if (SaveAs())
        {

            Editor.SetText(string.Empty);
            dataGrid.ItemsSource = null;

            //create new
            var settings = new KustoSettings();
          
            var loader = new StandardFormatAdaptor(settings);
            _explorer = new InteractiveTableExplorer(_console, loader, settings);
           
            settings.Set(KustoSettingNames.KustoDataPath, _workspaceManager.ContainingFolder());
            _console.PrepareForOutput();
            _console.Write($"{KustoSettingNames.KustoDataPath} set to '{_workspaceManager.ContainingFolder()}' for new project");
        }
        else
        {
            _workspaceManager.Load(currentPath);
            UpdateUIFromWorkspace();
        }
    }
}
