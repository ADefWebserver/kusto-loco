using System.ComponentModel;
using System.IO;
using System.Windows;
using KustoLoco.Core;
using KustoLoco.Core.Evaluation;
using KustoLoco.FileFormats;
using KustoLoco.Rendering;
using Lokql.Engine;
using Microsoft.Win32;

namespace lokqlDx;

public partial class MainWindow : Window
{
    private readonly WpfConsole _console;
    private readonly PreferencesManager _preferenceManager = new();
    private readonly WorkspaceManager _workspaceManager = new();
    private InteractiveTableExplorer _explorer;

    public MainWindow()
    {
        InitializeComponent();
        _preferenceManager.Load();
        _workspaceManager.Load(_preferenceManager.Preferences.LastWorkspacePath);

        _console = new WpfConsole(OutputText);
        var settings = new KustoSettings();
        var loader = new StandardFormatAdaptor(settings, @"C:\kusto");
        _explorer = new InteractiveTableExplorer(_console,
            new InteractiveTableExplorer.FolderContext(string.Empty, string.Empty, string.Empty),
            loader,settings);
    }


    private async Task RunQuery(string query)
    {
        //start capturing console output from the engine
        _console.PrepareForOutput();
        //run the supplied lines of kusto/commands
        //Note that we need the extra Task.Run here to ensure
        //that the UI thread is not blocked for reports generated by
        //the engine
        var result =
            await Task.Run(async () => await _explorer.RunInput(query, false));

        //if there are no results leave the previously rendered results in place
        if (result.RowCount == 0)
            return;

        if (result.Visualization != VisualizationState.Empty)
        {
            //annoying we have to do this, but it's the only way to get the webview to render
            await webview.EnsureCoreWebView2Async();
            //generate the html and display it
            var html = KustoResultRenderer.RenderToHtml(result);
            webview.NavigateToString(html);
        }

        FillInDataGrid(result);
    }

    private void FillInDataGrid(KustoQueryResult result)
    {
        var maxDataGridRows = int.TryParse(VisibleDataGridRows.Text, out var parsed) ? parsed : 100;
        var dt = result.ToDataTable(maxDataGridRows);
        dataGrid.ItemsSource = dt.DefaultView;
    }

    /// <summary>
    ///     Called when user presses CTRL-ENTER in the query editor
    /// </summary>
    private async void OnQueryEditorRunTextBlock(object? sender, QueryEditorRunEventArgs eventArgs)
    {
        await RunQuery(eventArgs.Query);
    }

    private void MainWindow_OnLoaded(object sender, RoutedEventArgs e)
    {
        var workspace = _workspaceManager.workspace;
        Editor.SetText(workspace.Text);
        var context =
            new InteractiveTableExplorer.FolderContext(
                workspace.WorkingDirectory,
                workspace.WorkingDirectory,
                workspace.WorkingDirectory);
        var settings = new KustoSettings();
        var loader = new StandardFormatAdaptor(settings, workspace.WorkingDirectory);
        _explorer = new InteractiveTableExplorer(_console, context, loader, settings);
    }

    private void SaveWorkspace(string path)
    {
        PreferencesManager.EnsureDefaultFolderExists();
        var workspace = _workspaceManager.workspace;
        workspace.Text = Editor.GetText();
        _workspaceManager.Save(workspace,path);
        _preferenceManager.Preferences.LastWorkspacePath = _workspaceManager._path;
        _preferenceManager.Save();

    }

    private void MainWindow_OnClosing(object? sender, CancelEventArgs e)
    {
      
    }

    private void OpenWorkSpace(object sender, RoutedEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void EditPreferences(object sender, RoutedEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void SaveWorkspace(object sender, RoutedEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void SaveWorkspaceAs(object sender, RoutedEventArgs e)
    {
        var folder = Path.GetDirectoryName(_workspaceManager._path);
        var dialog = new SaveFileDialog
        {
            InitialDirectory = folder,
            Filter = "Lokql Workspace|*.lokql",
            FileName = Path.GetFileName(_workspaceManager._path)
        };
        if (dialog.ShowDialog() == true)
        {
            _workspaceManager.Save(_workspaceManager.workspace,_workspaceManager._path);
            _preferenceManager.Preferences.LastWorkspacePath = dialog.FileName;
            _preferenceManager.Save();
        }
    }
}
